if &compatible
    set nocompatible
endif

function! s:source_rc(path, ...) abort
	let use_global = get(a:000, 0, !has('vim_starting'))
	"let abspath = resolve(expand('<sfile>:p:h') . "/rc/" . a:path)
	let abspath = resolve(expand("$XDG_CONFIG_HOME/nvim/rc/") . a:path)
	if !use_global
		execute 'source' fnameescape(abspath)
		return
	endif

	let content = map(readfile(abspath),
		\ 'substitute(v:val, "^\\W*\\zsset\\ze\\w", "setglobal", "")')
	let tempfile = tempname()
	try
		call writefile(content, tempfile)
		execute 'source' fnameescape(tempfile)
	finally
		if filereadable(tempfile)
			call delete(tempfile)
		endif
	endtry
endfunction

augroup MyAutoCmd
    autocmd!
    autocmd Filetype,Syntax,BufNewFile,BufNew,BufRead *?
        \ call vimrc#on_filetype()
    autocmd CursorHold *.toml syntax sync minlines=300
augroup END
augroup filetypedetect
augroup END

if has('vim_starting')
    call s:source_rc('init.rc.vim')
endif

call s:source_rc('dein.rc.vim')

if has('vim_starting') && !empty(argv())
    call vimrc#on_filetype()
endif

call s:source_rc('environment.rc.vim')

if !has('vim_starting')
    call dein#call_hook('source')
    call dein#call_hook('post_source')
endif

call s:source_rc('visual.rc.vim')

call s:source_rc('mapping.rc.vim')
